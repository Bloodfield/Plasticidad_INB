#!/bin/bash
# Run job through bash shell
#$ -S /bin/bash
#
# Your job name
#$ -N Recurrentes
#
# Use current working directory
#$ -cwd
#
# Join stdout and stderr
#$ -j y
#
# Send an email after the job has finished
#$ -m e
#$ -M echavezaparicio@gmail.com
#

##---------------------------------------------------------
#	DESCRIPCIÓN
#   
#	Este programa revisa las recurrencias de los bedfiles entre distintos experimentos
#   
#	Importante:
#   
#	IN:
#
#	OUT:
#
##---------------------------------------------------------

##---------------------------------------------------------
#	USO
#	
#
##---------------------------------------------------------

##---------------------------------------------------------
#	TO DO LIST
#	
##---------------------------------------------------------

declare -A Experimentos
########	ZONA DE CONFIGURACIÓN

####	Variables de entrada

Experimentos["SRX257065"]="SRR822843"
Experimentos["SRX237626"]="SRR730950"
Experimentos["SRX1660320"]="SRR3290534,SRR3325526"

#	BEDTOOLS
# Reciprical fraction to give a overlap
fraction="0.5"

#	DIRECCIONES

# Dirección padre de los archivos a usar (aquí debe estar el indice de segemehl)
HOME="/mnt/Timina/mhernandez/echavez"
#Habilitación de scripts personales
PATH=$PATH:$HOME/bin
#Tu correo para ser avisado
email="echavezaparicio@gmail.com"

########	ZONA DE CÓDIGO

# If modules are needed, source modules environment (Do not delete the next line):
. /etc/profile.d/modules.sh

module load gcc
module load bedtools

for i in "${!Experimentos[@]}"
do
IFS=',' read -ra ADDR <<< "${Experimentos[$i]}"
for k in "${ADDR[@]}";
do
	temp=""
	for j in "${!Experimentos[@]}"
	do
	if [ "$i" != "$j" ]
	then 
	IFS=',' read -ra ADDRj <<< "${Experimentos[$j]}"
	for l in "${ADDRj[@]}";
		do
		temp="$temp $HOME/${l}_file/${l}_1_cured_AlS_splitreads_Bloq.bed"
		done
	fi
	done
# 	echo -e "bedtools intersect -wa -wb \\n -a $HOME/${k}_file/${k}_1_cured_AlS_splitreads_Bloq.bed \\n -b ${temp} \\n -sorted \\n -filenames \\n -r ${fraction}"
	bedtools intersect -wa -wb \
		-a $HOME/${k}_file/${k}_1_cured_AlS_splitreads_Bloq.bed \
		-b ${temp} \
		-sorted \
		-filenames \
		-f ${fraction} -r > ${i}_${k}_Intersect.bed
	
	#	revisa cuantos experimentos avalan las deleciones en ${i}_${k}_Intersect.bed
	cut -f1-5 ${i}_${k}_Intersect.bed | uniq | cut -f1-3 | uniq -c  > ${i}_${k}_Freq.bed

	#	después se revisa la frecuencia de intersectados
	cat ${i}_${k}_Freq.bed | tr -s " " | cut -d" " -f2 | sort -k1n | uniq -c > ${i}_${k}_Freq_numExp.txt
# 	cat ${i}_${k}_Freq_numExp.txt
	#	Obtinene las longitudes de cada deleción 
	awk -v OFS='\t' '{print $2,$3,$4,$4-$3}' ${i}_${k}_Freq.bed > ${i}_${k}_uniq_Len.bed

	#	Se obtienen las frecuencias de longitudes
	cut -f4  ${i}_${k}_uniq_Len.bed | sort -n | uniq -c > ${i}_${k}_uniq_Len_Freq.txt
# 	cat ${i}_${k}_uniqLen_Freq.txt
done
done

#	Obtiene todas las deleciones presentes en al menos 2 experimentos
cat *_Freq.bed | tr -s " " | cut -d" " -f3- | sort -k1,1 -k1.4n -k2,3n | uniq > Deletions_Uniq.bed

#	Ontiene las deleciones junto con el rango de los flancos a 20 nt
awk -v OFS='\t' '{print $1,$2-20,$3+20}' Deletions_Uniq.bed  > Deletions_AndFlanc.bed

#	Obtiene las longitudes
awk -v OFS='\t' '{print $2,$3,$4,$4-$3}' Deletions_Uniq.bed > Deletions_Uniq_Len.bed

#	Se obtienen las frecuencias de longitudes
cut -f4  Deletions_Uniq_Len.bed | sort -n | uniq -c > Deletions_Uniq_Len_Freq.bed

#	Revisar que todo sirve, y si es necesario o ya se tiene el sort
# module load htslib/1.2.1
# module load samtools
# 
# samtools view -L Deletions_Uniq.bed
